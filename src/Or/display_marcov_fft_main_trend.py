#display_marcov_fft_main_trend.py
"""
Display the S&P 500 close price with a 3-level regime signal
generated by the *main* FFT-Markov model (markov_fft_main_trend.csv).

Signal legend
-------------
+1 → green   (bullish / up-trend expected to hold)
 0 → yellow  (transition / uncertain)
-1 → red     (bearish / down-trend expected to hold)

Run examples
------------
python -m Or.display_marcov_fft1
python -m Or.display_marcov_fft1 --save output.png
"""

from __future__ import annotations
import argparse
import sys
from pathlib import Path

import matplotlib.pyplot as plt
import pandas as pd

# ------------------------------------------------------------------
# Paths & colours
# ------------------------------------------------------------------

SCRIPT_DIR = Path(__file__).resolve().parent
DEFAULT_CSV = SCRIPT_DIR.parent / "markov_fft_main_trend.csv"

SIGNAL_COL = "regime_signal_fftfeat"
COLOUR_MAP = {1: "green", 0: "yellow", -1: "red"}

LEGEND_LINES = [
    plt.Line2D([0], [0], marker="o", color="w",
               label="Bull (+1)", markerfacecolor="lightgreen", markersize=6),
    plt.Line2D([0], [0], marker="o", color="w",
               label="Transition (0)", markerfacecolor="yellow", markersize=6),
    plt.Line2D([0], [0], marker="o", color="w",
               label="Bear (-1)", markerfacecolor="lightcoral", markersize=6),
]

# ------------------------------------------------------------------
# Main
# ------------------------------------------------------------------

def main() -> None:
    parser = argparse.ArgumentParser(
        prog="display_marcov_fft1",
        description="Plot S&P 500 close price with main FFT-Markov regime signal.",
    )
    parser.add_argument("--csv", type=str,
                        help=f"CSV path (default: {DEFAULT_CSV.name})")
    parser.add_argument("--save", type=str, metavar="FILE",
                        help="Save plot to FILE instead of showing.")
    args = parser.parse_args()

    # Resolve CSV path
    csv_path = Path(args.csv) if args.csv else DEFAULT_CSV
    if not csv_path.exists():
        alt = Path.cwd() / csv_path.name
        if alt.exists():
            csv_path = alt
        else:
            sys.exit(f"CSV not found. Tried {csv_path} and {alt}.")

    # ----------------------------------------------------------------
    # Load & validate data
    # ----------------------------------------------------------------
    df = pd.read_csv(csv_path, parse_dates=["date"]).set_index("date")

    required_cols = {"close", SIGNAL_COL}
    missing = required_cols - set(df.columns)
    if missing:
        sys.exit(f"Missing columns in CSV: {', '.join(sorted(missing))}")

    df[SIGNAL_COL] = df[SIGNAL_COL].fillna(0).astype(int)
    colours = df[SIGNAL_COL].map(COLOUR_MAP).fillna("gray")

    # ----------------------------------------------------------------
    # Plot
    # ----------------------------------------------------------------
    plt.figure(figsize=(12, 6))
    plt.plot(df.index, df["close"], linewidth=1, color="black", label="Close")
    plt.scatter(df.index, df["close"], c=colours, s=12, label="Regime")

    plt.title("S&P 500 – Close Price with Main FFT-Markov Regime Signal")
    plt.xlabel("Date")
    plt.ylabel("Close Price")
    plt.legend(handles=LEGEND_LINES + [plt.Line2D([], [], color="black",
                                                  label="Close")])
    plt.tight_layout()

    if args.save:
        plt.savefig(args.save, dpi=150)
        print(f"Plot saved to {args.save}")
    else:
        plt.show()


if __name__ == "__main__":
    main()
